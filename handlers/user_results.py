import logging
import re
from aiogram import Router, types, F, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import aiogram.utils.markdown as fmt
from fsm.user_results import StateUser
from database.db_start import db_conn, UserInfo, DailyResults
from datetime import datetime, date
from config_reader import config
import app_logger

log = app_logger.get_logger(__name__)

router = Router()

BRANCHES = ['8589', '8610', '8611', '8612', '8613', '8614', '8618', '6984', '9042']

@router.message(Command("sendresult"))
async def cmd_sendresult(message: types.Message, state: FSMContext):
    try:
        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç—á–µ—Ç
        if await check_daily_report_exists(user_id):
            await message.answer("üìä –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç—á–µ—Ç —Å–µ–≥–æ–¥–Ω—è!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        conn = db_conn()
        user_info = conn.query(UserInfo).filter(UserInfo.user_id == user_id).first()

        if user_info:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.update_data(
                branch=user_info.branch,
                first_name=user_info.first_name,
                last_name=user_info.last_name
            )

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏
            await state.set_state(StateUser.USER_CONFIRMATION)
            await message.answer(
                f"üë§ –í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
                f"–§–ò–û: {user_info.first_name} {user_info.last_name}\n"
                f"–û—Ç–¥–µ–ª–µ–Ω–∏–µ: {user_info.branch}\n\n"
                "–≠—Ç–æ –≤—ã? (–î–∞/–ù–µ—Ç)",
                reply_markup=types.ReplyKeyboardRemove()
            )
        else:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å—Ä–∞–∑—É –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –§–ò–û
            await state.set_state(StateUser.USER_CONFIRMATION)
            await message.answer(
                "üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤):",
                reply_markup=types.ReplyKeyboardRemove()
            )

    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –≤ cmd_sendresult: {e}")
        await notify_admin(f"–û—à–∏–±–∫–∞ –≤ cmd_sendresult: {e}", message)

@router.message(StateUser.USER_CONFIRMATION, F.text.lower() == "–Ω–µ—Ç")
async def process_user_decline(message: types.Message, state: FSMContext):
    try:
        await state.update_data(first_name=None, last_name=None, branch=None)
        await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤):")
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –≤ process_user_decline: {e}")
        await notify_admin(f"–û—à–∏–±–∫–∞ –≤ process_user_decline: {e}", message)

@router.message(StateUser.USER_CONFIRMATION, F.text.lower() == "–¥–∞")
async def process_user_confirm(message: types.Message, state: FSMContext):
    try:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ø–µ—Ä–≤–æ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è
        await state.set_state(StateUser.LEGAL_EXAMINATION)
        await message.answer("‚úÖ –õ–∏—á–Ω–æ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
                             "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ü—Ä–∞–≤–æ–≤—ã—Ö —ç–∫—Å–ø–µ—Ä—Ç–∏–∑:")
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –≤ process_user_confirm: {e}")
        await notify_admin(f"–û—à–∏–±–∫–∞ –≤ process_user_confirm: {e}", message)

@router.message(StateUser.USER_CONFIRMATION)
async def process_user_name(message: types.Message, state: FSMContext):
    try:
        if len(message.text.split()) < 2:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –ø–æ–ª–Ω–æ—Å—Ç—å—é:")
            return

        first_name, last_name = message.text.split(maxsplit=1)
        await state.update_data(first_name=first_name, last_name=last_name)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ç–¥–µ–ª–µ–Ω–∏—è
        builder = ReplyKeyboardBuilder()
        for branch in BRANCHES:
            builder.add(types.KeyboardButton(text=branch))
        builder.adjust(3)

        await state.set_state(StateUser.BRANCH_SELECTION)
        await message.answer(
            "üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ:",
            reply_markup=builder.as_markup(resize_keyboard=True)
        )
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –≤ process_user_name: {e}")
        await notify_admin(f"–û—à–∏–±–∫–∞ –≤ process_user_name: {e}", message)

@router.message(StateUser.BRANCH_SELECTION)
async def process_branch(message: types.Message, state: FSMContext):
    try:
        if message.text not in BRANCHES:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞:")
            return

        await state.update_data(branch=message.text)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await state.get_data()
        conn = db_conn()
        user_info = UserInfo(
            user_id=message.from_user.id,
            branch=message.text,
            first_name=user_data['first_name'],
            last_name=user_data['last_name'],
            date_added=datetime.now()
        )
        conn.merge(user_info)
        conn.commit()

        await state.set_state(StateUser.LEGAL_EXAMINATION)
        await message.answer(
            "‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ü—Ä–∞–≤–æ–≤—ã—Ö —ç–∫—Å–ø–µ—Ä—Ç–∏–∑:",
            reply_markup=types.ReplyKeyboardRemove()
        )
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –≤ process_branch: {e}")
        await notify_admin(f"–û—à–∏–±–∫–∞ –≤ process_branch: {e}", message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è
@router.message(StateUser.LEGAL_EXAMINATION)
async def process_legal_examination(message: types.Message, state: FSMContext):
    try:
        if not message.text.isdigit() or int(message.text) < 0:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")
            return

        await state.update_data(legal_examination=int(message.text))
        await state.set_state(StateUser.SUBSCRIPTION)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ü–æ–¥–ø–∏—Å–æ–∫:")
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –≤ process_legal_examination: {e}")
        await notify_admin(f"–û—à–∏–±–∫–∞ –≤ process_legal_examination: {e}", message)

@router.message(StateUser.SUBSCRIPTION)
async def process_subscription(message: types.Message, state: FSMContext):
    try:
        if not message.text.isdigit() or int(message.text) < 0:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")
            return

        await state.update_data(subscription=int(message.text))
        await state.set_state(StateUser.NON_MORTGAGE_SECONDARY)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ù–µ–∏–ø–æ—Ç–µ–∫–µ-–í—Ç–æ—Ä–∏—á–∫–∞:\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2 4500)")
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –≤ process_subscription: {e}")
        await notify_admin(f"–û—à–∏–±–∫–∞ –≤ process_subscription: {e}", message)

@router.message(StateUser.NON_MORTGAGE_SECONDARY)
async def process_non_mortgage_secondary(message: types.Message, state: FSMContext):
    try:
        parts = message.text.split()
        if len(parts) != 2 or not parts[0].isdigit() or not is_float(parts[1]):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2 4500):")
            return

        await state.update_data(
            non_mortgage_secondary_count=int(parts[0]),
            non_mortgage_secondary_sum=float(parts[1])
        )
        await state.set_state(StateUser.NON_MORTGAGE_PRIMARY)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ù–µ–∏–ø–æ—Ç–µ–∫–µ-–ü–µ—Ä–≤–∏—á–∫–∞:\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1 3000)")
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –≤ process_non_mortgage_secondary: {e}")
        await notify_admin(f"–û—à–∏–±–∫–∞ –≤ process_non_mortgage_secondary: {e}", message)

@router.message(StateUser.NON_MORTGAGE_PRIMARY)
async def process_non_mortgage_primary(message: types.Message, state: FSMContext):
    try:
        parts = message.text.split()
        if len(parts) != 2 or not parts[0].isdigit() or not is_float(parts[1]):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1 3000):")
            return

        await state.update_data(
            non_mortgage_primary_count=int(parts[0]),
            non_mortgage_primary_sum=float(parts[1])
        )
        await state.set_state(StateUser.NON_MORTGAGE_COUNTRY)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ù–µ–∏–ø–æ—Ç–µ–∫–µ-–ó–∞–≥–æ—Ä–æ–¥–∫–∞:\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0 0)")
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –≤ process_non_mortgage_primary: {e}")
        await notify_admin(f"–û—à–∏–±–∫–∞ –≤ process_non_mortgage_primary: {e}", message)

@router.message(StateUser.NON_MORTGAGE_COUNTRY)
async def process_non_mortgage_country(message: types.Message, state: FSMContext):
    try:
        parts = message.text.split()
        if len(parts) != 2 or not parts[0].isdigit() or not is_float(parts[1]):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0 0):")
            return

        await state.update_data(
            non_mortgage_country_count=int(parts[0]),
            non_mortgage_country_sum=float(parts[1])
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        user_data = await state.get_data()
        confirmation_text = (
            "‚úÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
            f"–§–ò–û: {user_data['first_name']} {user_data['last_name']}\n"
            f"–û—Ç–¥–µ–ª–µ–Ω–∏–µ: {user_data['branch']}\n\n"
            f"1. –ü—Ä–∞–≤–æ–≤–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞: {user_data.get('legal_examination', 0)}\n"
            f"2. –ü–æ–¥–ø–∏—Å–∫–∞: {user_data.get('subscription', 0)}\n"
            f"3. –ù–µ–∏–ø–æ—Ç–µ–∫–∞-–í—Ç–æ—Ä–∏—á–∫–∞: {user_data.get('non_mortgage_secondary_count', 0)} / {user_data.get('non_mortgage_secondary_sum', 0)}\n"
            f"4. –ù–µ–∏–ø–æ—Ç–µ–∫–∞-–ü–µ—Ä–≤–∏—á–∫–∞: {user_data.get('non_mortgage_primary_count', 0)} / {user_data.get('non_mortgage_primary_sum', 0)}\n"
            f"5. –ù–µ–∏–ø–æ—Ç–µ–∫–∞-–ó–∞–≥–æ—Ä–æ–¥–∫–∞: {user_data.get('non_mortgage_country_count', 0)} / {user_data.get('non_mortgage_country_sum', 0)}\n\n"
            "–í—Å–µ –≤–µ—Ä–Ω–æ? (–î–∞/–ù–µ—Ç)"
        )

        await state.set_state(StateUser.CONFIRMATION)
        await message.answer(confirmation_text)
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –≤ process_non_mortgage_country: {e}")
        await notify_admin(f"–û—à–∏–±–∫–∞ –≤ process_non_mortgage_country: {e}", message)

@router.message(StateUser.CONFIRMATION, F.text.lower() == "–¥–∞")
async def process_final_confirmation(message: types.Message, state: FSMContext):
    try:
        user_data = await state.get_data()
        conn = db_conn()
        today = date.today()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        daily_result = DailyResults(
            user_id=message.from_user.id,
            date=today,
            legal_examination=user_data.get('legal_examination', 0),
            subscription=user_data.get('subscription', 0),
            non_mortgage_secondary_count=user_data.get('non_mortgage_secondary_count', 0),
            non_mortgage_secondary_sum=user_data.get('non_mortgage_secondary_sum', 0),
            non_mortgage_primary_count=user_data.get('non_mortgage_primary_count', 0),
            non_mortgage_primary_sum=user_data.get('non_mortgage_primary_sum', 0),
            non_mortgage_country_count=user_data.get('non_mortgage_country_count', 0),
            non_mortgage_country_sum=user_data.get('non_mortgage_country_sum', 0)
        )

        conn.add(daily_result)
        conn.commit()

        await message.answer("üìà –í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –°–ø–∞—Å–∏–±–æ!")
        await state.clear()
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        await notify_admin(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}", message)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(StateUser.CONFIRMATION, F.text.lower() == "–Ω–µ—Ç")
async def process_final_rejection(message: types.Message, state: FSMContext):
    try:
        await state.set_state(StateUser.LEGAL_EXAMINATION)
        await message.answer("–ù–∞—á–Ω–µ–º –≤–≤–æ–¥ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∑–∞–Ω–æ–≤–æ.\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ü—Ä–∞–≤–æ–≤—ã—Ö —ç–∫—Å–ø–µ—Ä—Ç–∏–∑:")
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –≤ process_final_rejection: {e}")
        await notify_admin(f"–û—à–∏–±–∫–∞ –≤ process_final_rejection: {e}", message)


@router.message(Command("cancel"))
@router.message(F.text.lower() == "–æ—Ç–º–µ–Ω–∞")
async def cmd_cancel(message: types.Message, state: FSMContext):
    try:
        current_state = await state.get_state()
        if current_state is None:
            return

        await state.clear()
        await message.answer(
            "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=types.ReplyKeyboardRemove()
        )
        log.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ")
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –≤ cmd_cancel: {e}")
        await notify_admin(f"–û—à–∏–±–∫–∞ –≤ cmd_cancel: {e}", message)


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def is_float(value):
    try:
        float(value)
        return True
    except ValueError:
        return False


async def check_daily_report_exists(user_id: int) -> bool:
    try:
        conn = db_conn()
        today = date.today()
        return conn.query(DailyResults).filter(
            DailyResults.user_id == user_id,
            DailyResults.date == today
        ).first() is not None
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç—á–µ—Ç–∞: {e}")
        return False

async def notify_admin(admin_message: str, message: types.Message = None, bot_main: Bot = None):
    try:
        admin_id = config.admin.get_secret_value()
        bot = message.bot if message is not None else bot_main
        await bot.send_message(chat_id=admin_id,
                               text=fmt.text(fmt.text("‚ö†Ô∏è –û–®–ò–ë–ö–ê –í –ë–û–¢–ï:"),
        fmt.blockquote(admin_message),sep = '\n'))
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")